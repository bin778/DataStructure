연결 리스트(Linked List)
연결 리스트는 배열과 달리 메모리 상에서 인덱스(Index)에 의한 물리적 배치를 하지 않는다. 노드(Node)의 연결로 이루어진 자료구조이다.
노드의 포인터(Pointer)에 의해 다음 노드로 연결한다. 이를 통해 연결 리스트는 데이터 삽입/삭제 시 데이터의 구조를 재정렬 하지 않아도 된다.

노드는 데이터(Data)와 다음 노드를 가리키는 링크(Next)로 구성되어 있다.
제일 앞에 있는 노드를 헤드(Head), 제일 끝에 있는 노드를 테일(Tail)이라고 한다.

연결 리스트의 장점
연결 리스트는 크기를 동적으로 할당받을 수 있다.
배열은 크기가 정적이기 때문에 크기를 정해준 다음에 부족하면 메모리를 더 할당하고, 배열의 데이터를 복사해야 한다.
하지만 연결 리스트는 다음 노드만 추가하면 되기 때문에 리스트의 사이즈를 조정하는 데 효율적이다.

연결 리스트의 단점
연결 리스트는 특정 노드를 검색하거나 데이터를 변경할 때 바로 찾아낼 수가 없다.
최악의 경우 모든 연결 리스트의 모든 노드를 전부 탐색해야 해서 비효율적이다.

연결 리스트 사용 예시
음악 들을 때: 자신의 플레이 리스트에서 자동으로 다음 음악이 재생될 때 사용된다.
방문한 웹페이지: 실제 스택이나 큐를 구성하는데도 연결 리스트를 사용한다.

배열 VS 연결 리스트
사이즈(얼마나 들어오는지)를 모르는 상황: 배열<연결 리스트
연결 리스트는 동적 할당이라 가변적으로 크기가 변하기 때문에 더 효율적이다.

중간 데이터를 추가, 삭제할 때: 배열<연결 리스트
배열의 경우 중간의 값을 추가 및 삭제하려면 인덱스 번호를 한 칸씩 전부 당기거나 이동시켜야 한다.
하지만 연결 리스트는 링크의 연결만 바꿔주면 되기 때문에 더 효율적이다.

특정 데이터를 검색: 배열>연결 리스트
배열은 인덱스를 지정해서 값을 찾으면 되지만 연결 리스트는 하나씩 다 찾아야 한다.
결론적으로 배열은 특정 데이터를 탐색하는데 효과적이면, 연결 리스트는 데이터가 자주 추가 및 삭제되거나 가변적으로 자주 변할 때 사용하는 것이 좋다.

이중 연결 리스트(DoublyLinkedList)는 앞에서 살펴본 단일 연결 리스트에서 이전의 노드를 가리키는 포인터를 하나 더하는 것 뿐이다.
그러니까 각각의 노드에 포인터가 두 개씩 있게 된다.
이중 연결 리스트는 이처럼 반대 방향 포인터도 갖게 되어 성능상 유연함을 갖게 됐지만, 더 많은 메모리가 필요하게 됐다.

이중 연결 리스트의 성능
삽입이나 제거: O(1)
탐색이나 접근: O(N)(탐색의 시간복잡도는 정확하게 보면 O(N/2)이나, Big O에 의하면 여전히 O(N)이다)

이중 연결 리스트는 이전 노드를 향하는 포인터가 추가됐다는 점만 빼면 단일 연결 리스트와 비슷한 편이다.
이중 연결 리스트는 노드를 찾을 때는 단일 연결리스트에 비해 시간을 절반으로 줄일 수 있다.
이 외의 이중 연결 리스트의 시간복잡도는 단일 연결 리스트의 성능과 같다.
그러나 이중 연결 리스트는 포인터를 하나 추가하여 더 많은 메모리가 필요하다는 점이 단점이다.

원형 연결 리스트(Circular Linked List)는 연결 리스트와 다르게 마지막 node의 link가 null 값을 향하는 것이 아니고 처음 Head 부분을 향하고 있다. 따라서 node의 링크가 끊임 없이 연결되어 있다.
원형 연결 리스트가 기존 연결 리스트와 크게 다른 점은 위에 설명한 것 처럼 마지막 Link가 Head로 들어가게 만들어 주면 된다.
