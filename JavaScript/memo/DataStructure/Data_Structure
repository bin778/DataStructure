자료구조(Data Structure)란?
프로그램이 실행되기 위해서는 메모리에 올릴 데이터가 필요하여 이 데이터를 담아내는 방식이 자료구조이다.
쉽게 말해 자료구조는 '데이터의 저장'을 담당하고, 알고리즘은 '그 데이터를 이용해 문제를 해결하는 방법'이다.

우리가 자주 쓰는 int형, float형, 배열형도 자료구조의 일종이라고 볼 수 있다. 데이터를 표현하는 하나의 방법이기 때문이다.
우리가 자료구조나 알고리즘을 공부하는 목적은 결국 유지보수가 쉽고 속도가 빠르고 메모리 낭비가 적은 프로그램을 만들기 위해서라고 볼 수 있다.
어느 자료구조를 쓰는 지에 따라 프로그램 성능이 달라질 수 때문에 자료구조 종류들이 어떤 것이 있는지 또 어떻게 쓰이는지 공부하는 것은 중요하다고 볼 수 있다.

자료구조의 선택 기준
- 자료의 처리 시간
- 자료의 크기
- 자료의 활용 빈도
- 자료의 갱신 정도
- 프로그램의 용이성

자료구조의 특징
- 효율성
  자료구조를 사용하는 목적은 효율적인 데이터의 관리 및 사용이다.
  따라서 문제에 알맞은 자료구조를 사용하면 업무 효율이 증가할 것이다.
- 추상화
  추상화란 복잡한 자료, 모듈, 시스템 등으로 부터 핵심적인 개념만 간추려 내는 것이다.
  자료구조를 구현할 때 중요한 것은 어느 시점에 데이터를 삽입할 것이며, 어느 시점에 이러한 데이터를 어떻게 사용할 것인지에 초점을 맞출 수 있기 때문에 구현 외적인 부분에 더 시간을 쏟을 수 있다.
- 재사용성
  자료구조를 설계할때 특정 프로그램에서만 동작하게 설계하지는 않는다. 
  다양한 프로그램에서 동작할 수 있도록 범용성 있게 설계하기 때문에 해당 프로젝트가 아닌 다른 프로젝트에서도 사용할 수 있다.

자료구조의 분류
단순구조: 2진수, 정수, 실수, 문자, 문자열
선형구조: 자료를 구성하는 데이터들이 직선 형태로 순차적으로 나열되어 있는 구조(배열, 연결 리스트(단순 연결리스트, 이중 연결리스트, 원형 연결리스트), 스택, 큐, 데크).
비선형구조: 하나의 자료 뒤에 여러개의 자료가 존재할 수 있는 구조(트리(일반트리, 이진트리), 그래프(방향그래프, 무방향그래프)).
파일구조: 순차 파일, 색인 순차 파일, 직접 파일
