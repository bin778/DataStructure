자료 구조 : List / stack / Queue ==> 선형구조
           tree / heap ==> 비선형 구조
           sort(정렬)
           그래프

// 배열 리스트가 empty인 상태에서 항목을 읽으려 할 때 프로그램을 정지시킨다.
import java.util.NoSuchElementException;

배열 리스트 ex)
public class ArrList<E> {
    private E a[];
    private int size; // 리스트의 항목 수

public ArrList() { // 생성자
    a = (E[])new Object[1]; // 1개의 원소를 가지는 배열
    size = 0; // 항목을 0으로 초기화
  }
}

제네릭(Generic) : 객체의 타입을 저장하는 것
노드(Node) : 데이터의 최소 저장 단위
재귀(Recursion) : 자기 자신을 참조하는 것

<E>, <T>
<Object>

연결(링크) 리스트 ex)
public class ListNode {
    private int data; // 실제 노드
    private ListNode next; // 리스트 노드
    public ListNode(int data) {  }
}

List -> 1. 배열 리스트 -> 오버플로우. 즉, 값이 초과될 가능성이 있음
--> 그래서 배열을 만들때는 배열의 사이즈를 2배 정도 크게 만든다.
        2. 연결 리스트 : 2-1 -> 자기 참조 리스트
                        2-2 -> 외부 참조 리스트
        3. 원형 리스트
        
참조(Reference)변수 : 값이 저장되는 변수. 즉, 참조변수는 주소값이 저장되어 있다.
