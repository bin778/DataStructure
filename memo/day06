Stack / Queue

Stack : 데이터가 들어갈 때 한 쪽만 삽입하고 삭제할 수 있다.
제일 처음에 들어온 데이터가 밑에 깔리고 제일 나중에 들어온 데이터가 위로 들어간다.
그렇기 때문에 제일 처음에 들어온 데이터가 제일 나중에 삭제하게 된다(후입선출(LIFO))

push는 데이터를 Stack에 삽입하게 하는 것.
pop은 데이터를 Stack에서 삭제하는 것.
top(current)은 현재 들어간 데이터가 있는 위치. 데이터가 들어오거나 삭제하면 Top의 위치가 바뀐다.

Stack은 배열 스택과 연결 스택으로 나뉜다.
topIndex는 -1은 스택을 초기화 한다(Top이 제일 처음에 가리키는 초기값).
데이터를 처음 삽입해야 활성화 할 수 있기 때문에 -1을 가리킨다.

isEmpty() : 데이터가 비어있는지 확인하는 함수
popAll() : 모든 스택의 데이터를 삭제하는 함수

top ==> 1씩 증가
top = stack.length -1 : stack에 데이터가 꽉 찼다는 의미
stack.length == 배열 stack[]의 총 길이
top++ : 데이터가 하나 증가
stack[top] <-- x : 스택에 데이터를 집어넣는 작업(x는 데이터)

Stack 알고리즘 예시
원소 삽입
push(x):
  if(isFull()) then // 데이터가 꽉 찼는지 검사해야 하므로
    System.out.println("데이터 초과");
  else
    top++
    stack[top] <-- x

원소 삭제
pop():
  if(isEmpty()) then
    /* 실행 구문 */
  else
    top <-- stack[top]
    top--;
    return top

스택이 포화 상태인지 검사
isFull():
  if(top == stack.length - 1)
    return true
  else
    return false

스택이 비어있는지 검사
isEmpty():
  if(top == -1) // == top == stack.length-1
    return true
  else
    return false
    
연결리스트 Stack : Stack의 연결 노드 버전.
연결 노드가 끊어지면 top은 다음 노드로 이동
push(x): // 연결리스트 Stack push()
  newNode.item <-- x
  newNode.nextg <-- topNode
  topNode <-- newNode
  
public class LinkedStack<E> extends LinkedList<E> : 상속 및 인터페이스
                                    implements StackInterface<E> {......
==> 연결 리스트 + 스택의 interface 구현해서 stack의 연결리스트를 실행한다.

publicLinkedStack() {
  super();
}

import list.LinkedList;

Queue : 앞 뒤가 다 열려져 있기 때문에 제일 먼저 삽입한 데이터가 제일 먼저 삭제한다.

front : 제일 처음에 삽입한 데이터를 가리킨다. 데이터의 개수에 관계없이 제일 먼저 삽입한 데이터만 가리킨다.
앞에 있는 데이터가 삭제하면 그 다음 뒤에 있는 데이터를 가리킨다.
rear : 제일 마지막에 삽입한 데이터를 가리킨다. 데이터를 삽입하면 제일 마지막 데이터의 위치로 이동한다. tail로도 불린다.

front / rear는 -1을 선언한다. 데이터를 처음 삽입하면 같은 곳을 가리킨다.
앞의 데이터가 비어 있으면 그 다음에 존재하는 데이터가 front를 가리킨다.

원형 큐 : Queue를 원형으로 만든 것. Queue의 문제점을 보완하기 위해 만듬.
front 0 : 경계 --> 선형 큐와 달리 -1이 존재하지 않기 때문에 front / rear를 경계에다 둔다.

데크 : 데이터가 들어오는 통로가 삽입/삭제 둘 다 가능(기존 큐는 한쪽에서만 삽입/삭제 가능)

큐의 구조
queue[]
numItem : 총 원소 수를 나타낸다.
front() : 맨 앞의 원소 가리킨다
rear(tail) : 맨 뒤의 원소 가리킨다.
enqueue() : 데이터를 삽입하는 함수(in), dequeue() : 데이터를 삭제하는 함수(out)
* isEmpty() / dequeueAll() : 큐의 데이터를 모두 삭제한다.
